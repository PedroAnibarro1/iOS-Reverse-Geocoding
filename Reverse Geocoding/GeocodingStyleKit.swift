//
//  GeocodingStyleKit.swift
//  Reverse Geocoding
//
//  Created by Pedro Anibarro on 6/21/18.
//  Copyright Â© 2018 ErraticMinds. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class GeocodingStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let lightBackgroundColor: UIColor = UIColor(red: 0.933, green: 0.933, blue: 0.933, alpha: 1.000)
        static var imageOfAnnotationView: UIImage?
        static var annotationViewTargets: [AnyObject]?
        static var imageOfPinView: UIImage?
        static var pinViewTargets: [AnyObject]?
        static var imageOfLocationIcon: UIImage?
        static var locationIconTargets: [AnyObject]?
        static var imageOfLocationIconSelected: UIImage?
        static var locationIconSelectedTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var lightBackgroundColor: UIColor { return Cache.lightBackgroundColor }

    //// Drawing Methods

    @objc dynamic public class func drawAnnotationView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 240, height: 120), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 240, height: 120), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 240, y: resizedFrame.height / 120)


        //// Color Declarations
        let color2 = UIColor(red: 0.933, green: 0.933, blue: 0.933, alpha: 1.000)

        //// Group
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 115, y: 85))
        bezierPath.addCurve(to: CGPoint(x: 124, y: 101), controlPoint1: CGPoint(x: 115, y: 84), controlPoint2: CGPoint(x: 124, y: 101))
        bezierPath.addLine(to: CGPoint(x: 132, y: 85))
        GeocodingStyleKit.lightBackgroundColor.setFill()
        bezierPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 23, y: 17, width: 201, height: 68))
        color2.setFill()
        rectanglePath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawPinView(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 34, height: 47), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 34, height: 47), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 34, y: resizedFrame.height / 47)


        //// Color Declarations
        let color3 = UIColor(red: 0.800, green: 0.000, blue: 0.000, alpha: 1.000)
        let color4 = UIColor(red: 0.935, green: 0.935, blue: 0.935, alpha: 1.000)

        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath()
        rectanglePath.move(to: CGPoint(x: 17, y: 43))
        rectanglePath.addLine(to: CGPoint(x: 19, y: 43))
        rectanglePath.addLine(to: CGPoint(x: 19, y: 20))
        rectanglePath.addLine(to: CGPoint(x: 17, y: 20))
        rectanglePath.addLine(to: CGPoint(x: 17, y: 43))
        rectanglePath.close()
        UIColor.gray.setFill()
        rectanglePath.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 8, y: 2, width: 20, height: 20))
        color3.setFill()
        ovalPath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 17, y: 43))
        bezierPath.addLine(to: CGPoint(x: 18, y: 45))
        bezierPath.addLine(to: CGPoint(x: 19, y: 43))
        UIColor.gray.setFill()
        bezierPath.fill()


        //// Oval 2 Drawing
        context.saveGState()
        context.translateBy(x: 25.98, y: 10.94)
        context.rotate(by: -20.1 * CGFloat.pi/180)

        let oval2Path = UIBezierPath()
        oval2Path.move(to: CGPoint(x: 0, y: -3.53))
        oval2Path.addCurve(to: CGPoint(x: -1.43, y: -1.22), controlPoint1: CGPoint(x: 0, y: -2.25), controlPoint2: CGPoint(x: -0.64, y: -1.22))
        oval2Path.addCurve(to: CGPoint(x: -1.42, y: -3.37), controlPoint1: CGPoint(x: -2.23, y: -1.22), controlPoint2: CGPoint(x: -1.42, y: -2.1))
        oval2Path.addCurve(to: CGPoint(x: -1.43, y: -5.83), controlPoint1: CGPoint(x: -1.42, y: -4.64), controlPoint2: CGPoint(x: -2.23, y: -5.83))
        oval2Path.addCurve(to: CGPoint(x: 0, y: -3.53), controlPoint1: CGPoint(x: -0.64, y: -5.83), controlPoint2: CGPoint(x: 0, y: -4.8))
        oval2Path.close()
        color4.setFill()
        oval2Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawLocationIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let color6 = UIColor(red: 0.000, green: 0.567, blue: 0.785, alpha: 1.000)

        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 33.66, y: 13.34)
        context.rotate(by: 6.8 * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -19, y: 9.81))
        bezierPath.addLine(to: CGPoint(x: -8.35, y: 10.34))
        bezierPath.addLine(to: CGPoint(x: -8.46, y: 20.51))
        bezierPath.addLine(to: CGPoint(x: 5.02, y: -2.95))
        bezierPath.addLine(to: CGPoint(x: -19, y: 9.81))
        bezierPath.close()
        color6.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawLocationIconSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 50, height: 50), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 50, height: 50), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 50, y: resizedFrame.height / 50)


        //// Color Declarations
        let color6 = UIColor(red: 0.000, green: 0.567, blue: 0.785, alpha: 1.000)
        let color7 = color6.withSaturation(0.4)

        //// Bezier Drawing
        context.saveGState()
        context.translateBy(x: 33.66, y: 13.34)
        context.rotate(by: 6.8 * CGFloat.pi/180)

        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -19, y: 9.81))
        bezierPath.addLine(to: CGPoint(x: -8.35, y: 10.34))
        bezierPath.addLine(to: CGPoint(x: -8.46, y: 20.51))
        bezierPath.addLine(to: CGPoint(x: 5.02, y: -2.95))
        bezierPath.addLine(to: CGPoint(x: -19, y: 9.81))
        bezierPath.close()
        color7.setFill()
        bezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfAnnotationView: UIImage {
        if Cache.imageOfAnnotationView != nil {
            return Cache.imageOfAnnotationView!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 240, height: 120), false, 0)
            GeocodingStyleKit.drawAnnotationView()

        Cache.imageOfAnnotationView = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAnnotationView!
    }

    @objc dynamic public class var imageOfPinView: UIImage {
        if Cache.imageOfPinView != nil {
            return Cache.imageOfPinView!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 34, height: 47), false, 0)
            GeocodingStyleKit.drawPinView()

        Cache.imageOfPinView = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfPinView!
    }

    @objc dynamic public class var imageOfLocationIcon: UIImage {
        if Cache.imageOfLocationIcon != nil {
            return Cache.imageOfLocationIcon!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            GeocodingStyleKit.drawLocationIcon()

        Cache.imageOfLocationIcon = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfLocationIcon!
    }

    @objc dynamic public class var imageOfLocationIconSelected: UIImage {
        if Cache.imageOfLocationIconSelected != nil {
            return Cache.imageOfLocationIconSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 50, height: 50), false, 0)
            GeocodingStyleKit.drawLocationIconSelected()

        Cache.imageOfLocationIconSelected = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfLocationIconSelected!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var annotationViewTargets: [AnyObject]! {
        get { return Cache.annotationViewTargets }
        set {
            Cache.annotationViewTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: GeocodingStyleKit.imageOfAnnotationView)
            }
        }
    }

    @objc @IBOutlet dynamic var pinViewTargets: [AnyObject]! {
        get { return Cache.pinViewTargets }
        set {
            Cache.pinViewTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: GeocodingStyleKit.imageOfPinView)
            }
        }
    }

    @objc @IBOutlet dynamic var locationIconTargets: [AnyObject]! {
        get { return Cache.locationIconTargets }
        set {
            Cache.locationIconTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: GeocodingStyleKit.imageOfLocationIcon)
            }
        }
    }

    @objc @IBOutlet dynamic var locationIconSelectedTargets: [AnyObject]! {
        get { return Cache.locationIconSelectedTargets }
        set {
            Cache.locationIconSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: GeocodingStyleKit.imageOfLocationIconSelected)
            }
        }
    }




    @objc(GeocodingStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
